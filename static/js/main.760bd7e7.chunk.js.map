{"version":3,"sources":["components/skidderSlice.js","components/skid-dice/index.js","App.js","app/store.js","index.js"],"names":["skidderSlice","createSlice","name","initialState","rerolling","rolls","selectedForReroll","rerolled","reducers","reset","state","setRerolling","action","payload","createRolls","rolling","Array","from","length","Math","floor","random","selectForReroll","includes","push","reroll","forEach","val","new_roll","actions","SkidDice","props","useSelector","skidder","dispatch","useDispatch","className","roll","index","onClick","console","log","App","handleButtonClick","no","value","map","configureStore","reducer","skidderReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.760bd7e7.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const skidderSlice = createSlice({\n\n  name: 'skidder',\n  initialState: {\n    rerolling: false,\n    rolls: [],\n    selectedForReroll: [],\n    rerolled: false,\n  },\n  reducers: {\n    reset: (state) => {\n      state.rerolling = false;\n      state.selectedForReroll = [];\n      state.rerolled = false;\n    },\n    setRerolling: (state, action) => {\n      state.rerolling = action.payload\n    },\n    createRolls: (state, action) => {\n\n      var rolling = Array.from({ length: action.payload }, () => Math.floor(Math.random() * 6));\n\n      state.rolls = rolling\n    },\n    selectForReroll: (state, action) => {\n      if (!state.selectedForReroll.includes(action.payload)){\n        state.selectedForReroll.push(action.payload);\n      }\n    },\n    reroll: (state) => {\n      state.selectedForReroll.forEach((val) => {\n        var new_roll = Math.floor(Math.random() * 6);\n        state.rolls[val] = new_roll;\n      });\n      state.rerolled = true;\n    }\n  }\n})\n\nexport const { setRerolling, createRolls, selectForReroll, reroll, reset } = skidderSlice.actions\n\nexport default skidderSlice.reducer\n","import './skid-dice.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectForReroll } from '../../components/skidderSlice'\n\nfunction SkidDice(props) {\n  const rerolling = useSelector((state) => state.skidder.rerolling)\n  const selectedForReroll = useSelector((state) => state.skidder.selectedForReroll)\n  const rerolled = useSelector((state) => state.skidder.rerolled)\n  const dispatch = useDispatch()\n\n  const diceClass = () => {\n    var classMap = [\"hazard\", \"spin\", \"slide\", \"shift\", \"shift\", \"shift\"]\n    return `skid-dice ${classMap[props.roll]}`\n  }\n\n  const innerClass = () => {\n    if(selectedForReroll.includes(props.index)) {\n      if(rerolled === true) {\n        return 'skid-dice--inner  skid-dice--inner-rerolled'\n      } else {\n        return 'skid-dice--inner  skid-dice--inner-selected'\n      }\n    } else {\n      return 'skid-dice--inner'\n    }\n  }\n\n  const handleClick = () => {\n    if (rerolling === true && !rerolled) {\n      dispatch(selectForReroll(props.index));\n    } else {\n      console.log('rerolling no')\n    }\n  }\n\n  return (\n    <div className={diceClass()}>\n      <div className={innerClass()} onClick={() => handleClick()}>\n      </div>\n    </div>\n  );\n}\n\nexport default SkidDice;\n","import './App.css';\nimport SkidDice from './components/skid-dice'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setRerolling, createRolls, reroll, reset } from './components/skidderSlice'\n\nfunction App() {\n  const rolls = useSelector((state) => state.skidder.rolls)\n  const rerolling = useSelector((state) => state.skidder.rerolling)\n  const rerolled = useSelector((state) => state.skidder.rerolled)\n  const dispatch = useDispatch()\n\n  const handleButtonClick = (no) => {\n    dispatch(reset());\n    dispatch(createRolls(no));\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>\n        Skidder\n      </h1>\n      {\n        (() => {\n          if(!rerolling || rerolled) {\n            return(\n              <div>\n                <p>\n                  Tap number of dice to roll:\n                </p>\n                <div>\n                  <button className=\"roll-button\" value=\"1\" onClick={() => handleButtonClick(1)}>1</button>\n                  <button className=\"roll-button\" value=\"2\" onClick={() => handleButtonClick(2)}>2</button>\n                  <button className=\"roll-button\" value=\"3\" onClick={() => handleButtonClick(3)}>3</button>\n                  <button className=\"roll-button\" value=\"4\" onClick={() => handleButtonClick(4)}>4</button>\n                  <button className=\"roll-button\" value=\"5\" onClick={() => handleButtonClick(5)}>5</button>\n                </div>\n              </div>\n            )\n          }\n        })()\n      }\n      <p>\n      </p>\n      <div>\n        { rolls.map((roll, index) => <SkidDice key={index} roll={roll} index={index} />) }\n      </div>\n      <div>\n        {\n          (() => {\n            if (rolls.length > 0 && !rerolling) {\n              return (\n                <div>\n                  <h2>Push It!</h2>\n                  <p>\n                    If you want to Push it, tap 'choose dice' and then select the dice you wish to re-roll.\n                  </p>\n                  <p>\n                    <button className=\"roll-button\" value=\"choose\" onClick={() => dispatch(setRerolling(true))}>Choose Dice</button>\n                  </p>\n                </div>\n              )\n            } else if (rerolling === true && !rerolled) {\n                return (\n                  <div>\n                    <h2>Pushing It!</h2>\n                    <p>\n                      Select the dice you wish to re-roll then tap the reroll button\n                    </p>\n                    <p>\n                      <button className=\"roll-button\" value=\"choose\" onClick={() => dispatch(reroll())}>Reroll</button>\n                    </p>\n                  </div>\n                )\n            }\n          })()\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit'\nimport skidderReducer from '../components/skidderSlice'\n\nexport default configureStore({\n  reducer: {\n    skidder: skidderReducer,\n  },\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}